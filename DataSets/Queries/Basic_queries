-- # Q1 - >get all products available  in the market
-- #Syntax => 
-- SELECT [col,*] 
-- FROM [table] 
-- WHERE [filter] 
-- ORDERBY [col,cols] 
-- LIMIT [number];

SELECT * from farmer_market.product;

-- # Q2 ->Get me only 5 products in market

SELECT 
* 
FROM farmer_market.product 
LIMIT 5;

-- # Q3 ->Get me only product id , product_name and product_size

SELECT 
    product_id , 
    product_name , 
    product_size 
FROM farmer_market.product;

-- # Q4 -> get 5 product and sort data by product id 

-- # default - ascending ,  DESC - decending

SELECT 
    product_id , 
    product_name , 
    product_size 
FROM 
    farmer_market.product 
    ORDER BY product_id DESC  
LIMIT 10;

-- # Q5 -> order product_id y ascending , product name in descending 

SELECT 
    product_id , 
    product_name , 
    product_category_id 
FROM farmer_market.product 
    ORDER BY 
    product_category_id ,product_name DESC  
LIMIT 10;

-- # Q 6 -> In the customer purchases, We have quantity and cost per qty seperate, query the total amount that the customer has paid along with date, customer id , vendor id, cost per qty and the total amt?

SELECT 
  customer_id ,
  market_date , 
  vendor_id , 
  cost_to_customer_per_qty,
  quantity * cost_to_customer_per_qty 
FROM farmer_market.customer_purchases;

-- One dynamic column is created with name "fo" my multiplying quantity and cost_to_customer_per_qty cloumn present in customer_purchases table.
-- Now to change the name we can give alias (AS)

SELECT 
  customer_id ,
  market_date , 
  vendor_id , 
  cost_to_customer_per_qty,
  quantity * cost_to_customer_per_qty AS total_bill
FROM farmer_market.customer_purchases;


-- if the vaue is 16.9999999 --> rounf of with 2 decimal plax

SELECT 
  customer_id ,
  market_date , 
  vendor_id , 
  cost_to_customer_per_qty,
  ROUND(quantity * cost_to_customer_per_qty,2) AS total_bill
FROM farmer_market.customer_purchases;

-- #Question 7 Get full name of customer 
SELECT 
  CONCAT(customer_first_name," ", customer_last_name) AS customer_full_name
  from `farmer_market.customer`

-- Q8 - we need first letter and  last name should be captitalized example:Input : Ramya Pandian Output :Ramya PANDIAN

SELECT 
  CONCAT(customer_first_name," ", UPPER(customer_last_name)) AS customer_full_name
  from `farmer_market.customer`

-- if input is ramya Pandian output : Ramya PANDIAN
-- NOTE - SUBSTR(what is the input,INITAL POINT , END POINT) 
-- ENDPOINT - OPTIONAL 
SELECT 
  CONCAT(UPPER(SUBSTR( customer_first_name,1,1)),SUBSTR(customer_first_name, 2)," ", UPPER(customer_last_name)) AS customer_full_name
  from `farmer_market.customer`

-- Q 9 - Extract all the product name that are part of category1

SELECT 
  product_name, 
  product_category_id
  FROM `farmer_market.product`
  WHERE product_category_id =1;


-- Q10 - Print a report of everything customer_id 4 has ever purchased at the farmer's market sorted by market date n vendor id and product id 


SELECT 
  *
  FROM farmer_market.customer_purchases
  WHERE customer_id =4
  ORDER BY market_date , vendor_id , product_id;

  -- Q11 -  Get all products info for products with id  for products with id between 3 and 8 (not inclusive ) and product_ id  10 --> so we can have 4 ,5,6,7,10 product id 

  SELECT 
  *
  FROM farmer_market.product
  WHERE product_id > 3 AND product_id < 8 OR product_id =10
  ORDER BY product_id;

-- OR ONE MORE METHOD 


 SELECT 
  *
  FROM farmer_market.product
  WHERE product_id =10 
  OR (product_id > 3 AND product_id < 8)
  ORDER BY product_id;



-- Q12 - how to get the second highest value of quantity from customer_purchase 
-- offset integer syntax : LIMIT integer offset integer
-- offset 1 - OFFSET will tell from where to start 
-- IN below example we have put LIMIT 1 and OFFSET 1 --> So it will start from index 1 ( 2nd row ) and --LIMIT is 1 

 SELECT 
 * 
 FROM farmer_market.customer_purchases
 ORDER BY quantity DESC
 limit 1 offset 1; 

 --Q13 - FInd the details of purchase made by customer 4 and vendor 7 

 SELECT * FROM `farmer_market.customer_purchases` WHERE product_id = 4 AND vendor_id = 7;

 -- Q14 - If you wanted to find out what booth vendor 3 has assighned to on or before(less than or equal to) April20,2019
 SELECT 
  vendor_id ,market_date , booth_number
FROM farmer_market.vendor_booth_assignments
WHERE vendor_id = 3 AND  market_date <= "2019-04-20";

-- ############################################## ASSIGHNMENTS#############################################

-- Problem Statement:

-- Calculate the weighted average rating from the columns vote count and vote average and save the column as 'Weighted_avg_rating' and display the top 10 movies and their rating up to two decimals based on the new column created.

-- Note: Use the given formula to calculate a weighted average rating (v/(v+m) * R) + (m/(m+v) * C )

-- Where,

-- v is the number of votes for the movie vote_count;

-- m is the minimum votes required, take m as 104.0;

-- R is the average rating of the movie vote_average;

-- C is the mean vote across the whole report take c as 5.97.

-- Return the columns 'original_title' , 'Weighted_avg_rating'

SELECT 
    original_title , ROUND((vote_count/(vote_count +104.0)*vote_average )+ (104.0/(104.0+vote_count)* 5.97),2) AS Weighted_avg_rating
    FROM movies
ORDER BY Weighted_avg_rating DESC
LIMIT 10;

-- Q2 
-- Problem Description:

-- Write a query to calculate the salary of all employees after an increment of 20%. Save the calculated new salary column as 'New_salary'.

-- Note:

-- Return the columns emp_id, name, salary, and 'New_salary'.
-- Order the output by the emp_id in ascending order.
-- Steps to calculate the salary increment:

-- Multiply the current salary by the percentage of the increment.
-- Divide the result by 100.
-- Then add the result to the current salary.
-- Round off the 'New_salary'.
-- Sample Input:

-- Table: employees

-- emp_id   name      salary 
-- 1         ramya    6142


-- Sample Output:

-- emp_id   name      salary    New_salary
-- 1         ramya    6142       7370


SELECT 
emp_id , 
name , 
salary,
ROUND(((salary * 20 ) / 100) + salary) AS New_salary
FROM employees
ORDER BY emp_id;


----- Q3- 

-- Problem Statement:

-- Write a query to find all the details of the movie that has the third-highest revenue.

-- Note:

-- Return all the columns.
-- No two movies have the same revenue. (i.e, all the values in the revenue column are unique).
-- Dataset description for movies table:

-- 1) id - tmdb movie id

-- 2) imdb_id - imdb movie id

-- 3) popularity -A numeric quantity specifying the movie popularity.

-- 4) budget -The budget in which the movie was made.

-- 5) revenue - The worldwide revenue generated by the movie.

-- 6) original_title- The title of the movie

-- 7) cast - The name of the lead and supporting actors.

-- 8) homepage - A link to the homepage of the movie.

-- 9) director - The name of the director of the movie

-- 10) tagline - Movie's tagline.

-- 11) keywords -The keywords or tags related to the movie.

-- 12) overview -A brief description of the movie.

-- 13) runtime -The running time of the movie in minutes.

-- 14) genres -The genres of the movies

-- 15) production_companies-The production house of the movie.

-- 16) release_date -the date on which it was released.

-- 17) vote_count -the count of votes received.

-- 18) vote_average - average ratings the movie received.

-- 19) release_year - the year on which it was released.


SELECT * 
FROM movies
ORDER BY revenue DESC
LIMIT 3 OFFSET 2;


-- Q4 - 
-- Problem Statement:

-- Show the titles of the movies that are released (i.e, release_year) after 2014 and have an average vote rating (i.e,vote_average) greater than 7.

-- Return the column 'original_title'
-- Dataset description for movies table:

-- 1) id - tmdb movie id

-- 2) imdb_id - imdb movie id

-- 3) popularity -A numeric quantity specifying the movie popularity.

-- 4) budget -The budget in which the movie was made.

-- 5) revenue - The worldwide revenue generated by the movie.

-- 6) original_title- The title of the movie

-- 7) cast - The name of the lead and supporting actors.

-- 8) homepage - A link to the homepage of the movie.

-- 9) director - The name of the director of the movie

-- 10) tagline - Movie's tagline.

-- 11) keywords -The keywords or tags related to the movie.

-- 12) overview -A brief description of the movie.

-- 13) runtime -The running time of the movie in minutes.

-- 14) genres -The genres of the movies

-- 15) production_companies-The production house of the movie.

-- 16) release_date -the date on which it was released.

-- 17) vote_count -the count of votes received.

-- 18) vote_average - average ratings the movie received.

-- 19) release_year - the year on which it was released.

SELECT original_title 
from movies
WHERE release_year > '2014' AND vote_average  > 7;

-- Q5 ->
-- Problem Statement:

-- List down all the movies along with their details that have keywords like 'sport' or 'sequel' or 'suspense'.

-- Return the columns 'original_title', 'director', 'genres', 'cast', 'budget', 'revenue', 'runtime', and 'vote_average'.
-- Dataset description for movies table:

-- 1) id - tmdb movie id

-- 2) imdb_id - imdb movie id

-- 3) popularity -A numeric quantity specifying the movie popularity.

-- 4) budget -The budget in which the movie was made.

-- 5) revenue - The worldwide revenue generated by the movie.

-- 6) original_title- The title of the movie

-- 7) cast - The name of the lead and supporting actors.

-- 8) homepage - A link to the homepage of the movie.

-- 9) director - The name of the director of the movie

-- 10) tagline - Movie's tagline.

-- 11) keywords -The keywords or tags related to the movie.

-- 12) overview -A brief description of the movie.

-- 13) runtime -The running time of the movie in minutes.

-- 14) genres -The genres of the movies

-- 15) production_companies-The production house of the movie.

-- 16) release_date -the date on which it was released.

-- 17) vote_count -the count of votes received.

-- 18) vote_average - average ratings the movie received.

-- 19) release_year - the year on which it was released.


SELECT 
original_title,
director,
genres,
cast,
budget,
revenue,
runtime,
vote_average
FROM movies
WHERE keywords IN ('sport' ,'sequel','suspense');


-- Q6 -->

-- Problem Statement:

-- Display the details of the movies which belong to the 'Horror' genre in descending order of popularity.

-- Return the columns 'original_title', 'popularity'.
-- Dataset description for movies table:

-- 1) id - tmdb movie id

-- 2) imdb_id - imdb movie id

-- 3) popularity -A numeric quantity specifying the movie's popularity.

-- 4) budget -The budget in which the movie was made.

-- 5) revenue - The worldwide revenue generated by the movie.

-- 6) original_title- The title of the movie

-- 7) cast - The name of the lead and supporting actors.

-- 8) homepage - A link to the homepage of the movie.

-- 9) director - The name of the director of the movie

-- 10) tagline - Movie's tagline.

-- 11) keywords -The keywords or tags related to the movie.

-- 12) overview -A brief description of the movie.

-- 13) runtime -The running time of the movie in minutes.

-- 14) genres -The genres of the movies

-- 15) production_companies-The production house of the movie.

-- 16) release_date -the date on which it was released.

-- 17) vote_count -the count of votes received.

-- 18) vote_average - average ratings the movie received.

-- 19) release_year - the year on which it was released.

SELECT 
original_title,
popularity
FROM movies
WHERE genres = 'Horror'
ORDER BY popularity  DESC;

-- Q7 
-- Problem Statement:

-- Find the details of the movies that are released between the years 2012-2015 i.e, (Including 2012 and 2015).

-- Return the columns 'original_title', 'genres', 'vote_average', and 'revenue'.
-- Dataset description for movies table:

-- 1) id - tmdb movie id

-- 2) imdb_id - imdb movie id

-- 3) popularity -A numeric quantity specifying the movie popularity.

-- 4) budget -The budget in which the movie was made.

-- 5) revenue - The worldwide revenue generated by the movie.

-- 6) original_title- The title of the movie

-- 7) cast - The name of the lead and supporting actors.

-- 8) homepage - A link to the homepage of the movie.

-- 9) director - The name of the director of the movie

-- 10) tagline - Movie's tagline.

-- 11) keywords -The keywords or tags related to the movie.

-- 12) overview -A brief description of the movie.

-- 13) runtime -The running time of the movie in minutes.

-- 14) genres -The genres of the movies

-- 15) production_companies-The production house of the movie.

-- 16) release_date -the date on which it was released.

-- 17) vote_count -the count of votes received.

-- 18) vote_average - average ratings the movie received.

-- 19) release_year - the year on which it was released.

SELECT 
original_title,
genres,
vote_average,
revenue
FROM movies
WHERE release_year BETWEEN '2012' AND '2015';

-- ################################################################################################### 
-- DAY 3
-- 1. BETWEEN CLAUSE 
-- NOTE :  include starting and end value 
-- SYNTAX = BETWEEN startVALUE AND  endVALUE
-- Between clause work on all datatype not only data

--Q1 . Find the booth assignments for vendor 7 for any market date that occurred between april 03 2019 and may 16 2019

SELECT 
  vendor_id ,market_date , booth_number
FROM farmer_market.vendor_booth_assignments
WHERE vendor_id = 7
AND  
market_date BETWEEN "2019-04-03" AND "2019-05-16";

-- Q2 . Return a list customers with selected last name ['diaz','Edwards','wilson']

SELECT CONCAT(customer_first_name , customer_last_name)
FROM `farmer_market.customer`
WHERE customer_last_name = "Diaz" OR customer_last_name = "Edwards" OR customer_last_name = "Wilson";

-- 2. IN CLAUSE

-- Above its not a efficient for more data. SO we need to use IN clause
-- NOTE : THIS will check for exact match ( its also case sensitive)

SELECT CONCAT(customer_first_name , customer_last_name)
FROM `farmer_market.customer`
WHERE customer_last_name IN ("Diaz" , "Edwards" ,"Wilson");

-- 3. LIKE OPERATOR
-- Has 2 major regular expression ( % and _)
-- SYNTAX --> WHERE name LIKE '..' 
-- (a) % -> example input - Ramya Pandian
     -- 1.lastname LIKE 'pan%' --> Here it will start searching in DB with lastname start with "pan" so it can return pandayia , pandian , panreen like that 
     -- 2 . Now we dont know starting or ending but we know the mid combinatioon 
            -- lastname LIKE '%di%' --> it will pick with combination of names with "di"
    -- %ab --> it can choose "abc","ssabdd", it should have ab in combination
    -- ab% --> it should start with "ab"
    -- %ab% --> search for ab combo 

-- (b) Underscore( _ )->it is restricted 
   -- lastname LIKE '__ndian' Here there are 2 underscore but it should end with ndian only strict 

-- (c) % , _ -> "A_ _ _ m% "  Options 1. Autumn 2. Argument 3. Argentima 4. autumn 
                            -- Out of these the matched are 1 ,2 
-- NOTE --> CASE SENSITIVE 

-- Q3 . You want a get a data about a customer you knew as 'JERRY' , but you werent sure if he was listed in a database as 'jerry' or 'jeremy' or jeremiah

SELECT * 
FROM farmer_market.customer
WHERE customer_first_name like 'Jer%'

-- Q4. You want to get data about a customer first name STARTS WITH "a" and lastname ENDS with 'e'

SELECT * 
FROM farmer_market.customer
WHERE customer_first_name like 'A%' AND customer_last_name like '%e'

--Q5 . You want get data with cutomer first name start with any letter and "a" in second position and LAST name ENDs with 'e'
SELECT * 
FROM farmer_market.customer
WHERE customer_first_name like '_a%' AND customer_last_name like '%e'

-- 3. NULL 
-- IN python none -> No space , doesnt exit 
-- IN sql NULL is equivalent to none in python 
-- to check the value is null we can use WHERE colun name = NULL --> This will return 0 result since NUll doesnt have value instead we have to use   "is NULL" and "is NOT NULL"

-- Q 6 - How to get null values from product table 
SELECT * FROM farmer_market.product WHERE product_size is NULL;

-- We need to replace  the NULL values because NULL value in DB is not good 
--HOW to replace NULL value 
--------  1.    COALESCE Function ----- 
-- SYNTAX : coalesce("colname that has NULL values" , "value to be replaced ")

SELECT product_name,
coalesce(product_size,"size not available")
FROM farmer_market.product;

-- Here it will not change the actual DB 

-----------------2 . IFNULL FUNCTION 
-- SYNTAX  - ifnull("colname that has NULL values" , "value to be replaced ")

SELECT product_name,
ifnull(product_size,"size not available")
FROM farmer_market.product;

-- COALESCE                                   |       IFNULL
-- 1.  replace more than 1 col                |1.it just take 2 arguments 
                                                    --and return the fist if its not null 
--     it can take 2 or more parameter        |
--     and return the first non null parameter|   

-----------------------  SUBQUERY  -----------------------
--- It is query inside query 
-- Q1 - Analyse the purchases made at the farmer market on days when it rained
-- Here we need two table 
1. to check the days are raining its in market_date_info table 
2. To get the purchase details we need to check  customer_purchases table

TO GET THE RAINY DAYS 

SELECT * 
FROM farmer_market.market_date_info
WHERE market_rain_flag = 1;


TO GET THE purchase DETAILS 

SELECT 
ROUND(quantity * cost_to_customer_per_qty,2) as total_bill, customer_id , vendor_id
FROM farmer_market.customer_purchases

-- SUBQUERY TO COMBINE BOTH 

-- Since query 1 taking the rainy days is using where condition we can add that has subquery to query 2 
-- We cant put market_date ' =' since the query 1 will return bunch of days it cant check so use "IN"
-- where market_date col s given because it matched with market_date_info table 

SELECT 
ROUND(quantity * cost_to_customer_per_qty,2) as total_bill, customer_id , vendor_id
FROM farmer_market.customer_purchases
WHERE market_date IN 
(
SELECT market_date
FROM farmer_market.market_date_info
WHERE market_rain_flag = 1
);


-- Q 2 . List down all the product details where product_category contains "Fresh"

SELECT * FROM farmer_market.product
WHERE product_category_id IN 
(
SELECT 
product_category_id
FROM farmer_market.product_category 
WHERE product_category_name LIKE '%Fresh%'
);


--- ######################### ASSIGHMENTENTS  #############################
-- Q1
-- Problem Statement:

-- Display the details of the employees who work in departments 50,10, or 80 and whose salary is between 5000 to 10000 and also where employees have no commission_pct(commission percentage).

-- Return the columns 'employee_id', 'first_name', 'last_name', 'salary'.
-- Use the employees table.

SELECT 
employee_id,
first_name,
last_name,
salary
FROM employees
WHERE (salary BETWEEN 5000 AND 10000) AND (department_id IN (50,10,80)) AND commission_pct is null;

-- Q2 
-- Problem Description:

-- Find the details of the employees who are working in the departments 'Administration', 'Marketing', and 'Human Resources'.

-- Return the columns 'employee_id', 'full_name'(first and last name separated by space), and 'salary'.

SELECT 
employee_id,
CONCAT(first_name," ",last_name) AS full_name,
salary
FROM employees
WHERE department_id  IN (
    SELECT department_id 
    FROM departments
    WHERE department_name IN ('Administration','Marketing','Human Resources')
);

-- Q3 -
-- Problem Statement:

-- Display the details of all the employees whose department location is in Seattle.

-- Return the columns 'first_name', 'last_name', 'employee_id', and job_id'.
-- Use the tables employees, departments, and locations.

SELECT 
first_name , 
last_name,
employee_id,
job_id
FROM employees
WHERE department_id IN (
SELECT department_id FROM departments 
WHERE location_id IN (
SELECT location_id FROM locations WHERE city = 'Seattle'
))

-- Q4

-- Problem Description:

-- Find all the employees whose first name ends with the letter 'n'.

-- Return the columns 'employee_id', 'full_name' (first name and last name separated by space), and 'phone_number'.
-- Use the employees table.


SELECT 
employee_id,
CONCAT(first_name, " ",last_name) AS full_name ,
phone_number
FROM employees
WHERE first_name lIKE '%n';

-- Q5 







--- ##################################################################



-- DAY 4 - JOINTS 

-- CAUSE STATEMENTS -- this is  like SWITCH in python 
-- It will be excuted row by row 

--SYNTAX 

CASE 
  WHEN('first condition')
  THEN ('do actions')
  WHEN ('second condition')
  THEN('do actions')
  ELSE ('other part ')
END As table name  
-- like default in switch is none of the cases are valid END will run
-- END keyword is mandate but after AS table name is optional


-- Q1 : Find out which vendors primarily sell fresh produce and which dont't

SELECT 
vendor_id,
vendor_name,
vendor_type,
CASE
  WHEN vendor_type like '%Fresh%' THEN 'Fresh Produce'
  ELSE 'OTHER'
END AS vendor_classification   -- here we have specified table name 
FROM `farmer_market.vendor`;  


-- Q2 :  Put the tota cost to customer purchases into bins of 
-- under $5.00, 
-- $5.00 - $9.99, 
-- $10.00 - $19.00 or 
-- $20.00 and over

SELECT 
  ROUND(quantity * cost_to_customer_per_qty) As total_price,
  CASE
    WHEN total_price < 5.00 THEN 'under $5.00'
    WHEN total_price BETWEEN 5.00 AND 9.99 THEN '$5.00 - $9.9'
    WHEN total_price BETWEEN 10.00 AND 19.00 THEN '$10.00 - $19.00'
    ELSE '$20.00 and over'
  END AS bins_total_cost
FROM `farmer_market.customer_purchases`

-- Here this will give error "Unrecognized name: total_price at [4:10]"
--Thats is because in order of execution is 
/*
1. FROM - the databases get the data from tables in FROM clause and if neccessaay, performs the JOINS

2. WHERE - the data are filtered with conditions specified in the WHERE clause

3. GROUP BY - the data are grouped by conditions specified in the WHERE clause

4. Aggreagate functions - the aggregate functions are applied to the groups created in the GROUP BY phase

5. HAVING - the groups are filtered with the gven condition 

6. WONDOW functions 

7. SELECT - the databases selects the given columns 

8. DISTRICT - repeated values are removed 

9. UNION /INTERSECT/ EXPECT  - the database applies set operations,

10. ORDER BY - the results are sorted 

11. OFFSEt- the first rows are skipped 

12. LIMIT/ FETCH/ TOP - only the first rows are selected

IN the above we can see select is executed somewhere in mid since we have case statements and all it cant recognize total_price value so we have to give like this 
*/

SELECT 
  ROUND(quantity * cost_to_customer_per_qty) As total_price,
  CASE
    WHEN quantity * cost_to_customer_per_qty < 5.00 THEN 'under $5.00'
    WHEN quantity * cost_to_customer_per_qty BETWEEN 5.00 AND 9.99 THEN '$5.00 - $9.9'
    WHEN quantity * cost_to_customer_per_qty BETWEEN 10.00 AND 19.00 THEN '$10.00 - $19.00'
    ELSE '$20.00 and over'
  END AS bins_total_cost
FROM `farmer_market.customer_purchases`

-- JOINTS ----------------------------------------------------------
/*
SUBQUERY                                |             JOINS 
                                        |
1. Subquery are computationally         |  1. Joins are not much expensive 
expensive                               |
                                        |
2.subquery code becomes difficult to    |  2. Joins are very simple 
maintain if there are more than 3 levels|

3. Mostly its developer fav             | 3. Its for Data analyst


TYPES OF JOINS 

1. LEFT JOIN / LEFT OUTER JOIN 
2. RIGHT JOIN / RIGHT OUTER JOIN 
3. INNER JOIN 
4. FULL OUTER JOIN 
*/



-- LEFT JOIN EXAMPLE 

-- JOIN product and product_category table 

-- SYNTAX ----> SELECT * from <left table> LEFT JOIN <right table > ON lefttable.foreighkey = righttable.foreighkey

-- In the above syntax * means it will return left table + right table columns fully 
-- We should use foreigkey to combine both table 

-- -- Instead of * we can select the column name also 
-- example : select product.product_name , product_category.product_category_name

-- In this it will only give 2 columns given 

SELECT *
FROM farmer_market.product
LEFT JOIN farmer_market.product_category
ON product.product_category_id = product_category.product_category_id


-- Q 1 - Get details of all vendors selling fresh or vegetables with product names and the quantity of the product in their inventory?
-- Here 3 tables are used --> vendor , product , vendor_inventory




